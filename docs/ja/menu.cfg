#
#  Easyboot の設定ファイルの例
#
#  ヒント: `easyboot -vv` (少なくとも 2 つの 'v' を使用) を実行すると、
#  入力が検証され、ブート構成ファイルの構文チェックも含まれます。
#

# ------------------------------------------------------------------------------
# デフォルトでは、ブート メッセージは抑制され、「静かな」モードになっています。
# 詳細レベルを上げると、より詳細な情報が表示されます。

verbose 1
#verbose 3

# ------------------------------------------------------------------------------
# フレームバッファは常に設定され、デフォルトでは 800 x 600 x 32bpp です。
# 次の行でこれを変更できます。また、前景色と背景色、および進行状況バーの色を指定
# することもできます。

framebuffer 1024 768 16
#framebuffer 1920 1080 32 #202020 #f0f0f0 #d0d0d0

# ------------------------------------------------------------------------------
# `default` オプションは、ユーザー操作がない場合にタイムアウト後にどの
# `menuentry` を起動するかを指定します。最初の数字は 1 から 9 までのインデックスで、
# 2 番目の引数はミリ秒単位です。

# 5秒後に最初のオプションを自動的に選択します
default 1 5000

# ------------------------------------------------------------------------------
# デフォルトでは、メニュー内のブート オプションは水平に配置されます。
# これを垂直に変更できます。

#menualign vertical

# ------------------------------------------------------------------------------
# この行は新しいブート オプションを開始します。これは次の `menuentry` 
# 行まで続きます。最初の引数はアイコンで、2 番目はオプションのバージョンまたはリ
# リース情報です。後者は ASCII のみです。各アイコンには、高さ 64 ピクセル、幅 64
# ピクセルの easyboot/(icon).tga ファイルが存在し、RLE 圧縮インデックス (カラー
# マップ) TGA 形式である必要があります。

menuentry linux current

# ------------------------------------------------------------------------------
# カーネルとモジュールがブート パーティションではなく別のパーティションにある場
# 合は、ここでそのルート パーティションを指定できます。

partition 01020304-0506-0708-0a0b0c0d0e0f1011

# ブート パーティション以外からファイルをロードする場合は、ファイル システム 
# プラグインが必要になります。

# ------------------------------------------------------------------------------
# `kernel` を使用すると、どのファイルをロードし、どの引数を渡すかを指定できます。
# パスは絶対パス (`.` や `..` は不可) でなければならず、そのルートは選択したルート
# (またはブート) パーティションに相対的です。ディレクトリを使用する場合、
# 区切り文字は `/` です (UEFI でも同様)。スペースはコマンド ラインとパスを区切るため、
# パスにスペースが必要な場合は、`my\ kernel` のようにバックスラッシュでエスケ
# ープする必要があります。名前の一致は大文字と小文字を区別しません。

kernel vmlinuz-linux console=ttyS0,115200 console=tty0
#kernel mykernel
#kernel core.exe
#kernel boot/bzImage quiet
#kernel EFI/boot/3rd\ Party.elf
# ルートパーティションはブートコマンドラインで指定することもできます
#kernel vmlinuz-linux root=PARTUUID=01020304-0506-0708-0a0b0c0d0e0f1011

# カーネルが ELF または PE ではない場合、または Multiboot2 プロトコルを使用して
# いない場合、カーネルを起動するにはカーネル ローダー プラグインが必要になります。

# ------------------------------------------------------------------------------
# `module` ディレクティブを使用して、さらにファイルをロードできます。`kernel`
# と同じ構文で、最初の引数はパス、残りはオプションのパラメータです。

module initrd
#module boot/rootfs.tgz arch=任意 その他 引数

# gzip で圧縮されていないモジュールがあり、それを透過的に解凍したい場合は、
# 解凍プラグインが必要になります。

# ------------------------------------------------------------------------------
# もちろん、ブート スプラッシュ ロゴを表示できます。RLE 圧縮インデックス (カラー
# マップ) TGA 形式である必要があります。最初の引数が `#` ハッシュ マークで始まっ
# ていない場合は、引数は 1 つだけであり、それがロゴ ファイルです。最初の引数が
# `#` で始まっている場合は、HTML カラー表記が続き、背景色を設定します。この場合、
# 2 番目の引数はパスです。

bootsplash #1177FF logo.tga
#bootsplash logo.tga
#bootsplash #00FF00 boot/images/my\ splash\ screen.tga

# この `menuentry` がブート用に選択されると、ブート スプラッシュ ロゴが表示されます。

# ------------------------------------------------------------------------------
# すべてのプロセッサ コアでカーネルを一度に起動できます。

#multicore

# ------------------------------------------------------------------------------
# さらに `menuentry` 仕様が続く可能性があります。その中で必須なのは `kernel`
# 行のみで、ブロックも使用できます (見た目のみ)。

menuentry linux backup {
    kernel vmlinuz-backup console=ttyS0,115200 console=tty0
}
